import discord
import os
import sys
from datetime import datetime, timedelta
import pytz
import asyncio

# L·∫•y token v√† k√™nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.getenv('DISCORD_BOT_TOKEN')
CHANNEL_ID_STR = os.getenv('DISCORD_CHANNEL_ID')

if not TOKEN or not CHANNEL_ID_STR:
    print("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng.")
    sys.exit(1)

CHANNEL_ID = int(CHANNEL_ID_STR)

intents = discord.Intents.default()
intents.message_content = True
bot = discord.Client(intents=intents)

tz = pytz.timezone('Asia/Ho_Chi_Minh')

# üïí Danh s√°ch boss v·ªõi th·ªùi gian spawn ƒë·ªông
boss_cycle_schedule = {
    "Bluemen II": {
        "start": "2025-05-08 00:30",
        "cycle_hours": 12
    },
    "Betalanse II": {
        "start": "2025-05-08 02:30",
        "cycle_hours": 12
    },
    "Cryo II": {
        "start": "2025-05-08 04:30",
        "cycle_hours": 12
    },
    "Sporelex II": {
        "start": "2025-05-08 06:30",
        "cycle_hours": 12
    },
    "Toxspore II": {
        "start": "2025-05-08 08:30",
        "cycle_hours": 12
    },
    "Bristol II": {
        "start": "2025-05-08 10:30",
        "cycle_hours": 12
    },
    "Veilian II": {
        "start": "2025-05-08 12:30",
        "cycle_hours": 12
    },
    "Arque II": {
        "start": "2025-05-08 14:30",
        "cycle_hours": 12
    },
    "Rootrus II": {
        "start": "2025-05-08 16:30",
        "cycle_hours": 12
    },
    "Sapphire Blade II": {
        "start": "2025-05-08 06:30",
        "cycle_hours": 12
    },
    "Coralisk II": {
        "start": "2025-05-08 08:30",
        "cycle_hours": 12
    },
    "Breeze II": {
        "start": "2025-05-08 10:30",
        "cycle_hours": 12
    },
    "Rootrus I": {
        "start": "2025-05-08 16:40",
        "cycle_hours": 10
    },    "Sapphire Blade I": {
        "start": "2025-05-08 06:30",
        "cycle_hours": 12
    },
    "Coralisk I": {
        "start": "2025-05-08 08:30",
        "cycle_hours": 12
    }

}

# üîÅ H√†m x·ª≠ l√Ω boss theo chu k·ª≥ (chu·∫©n, kh√¥ng l·ªách chu k·ª≥)
async def check_cycle_boss(schedule, now, channel):
    warning_sent = False

    for boss, info in schedule.items():
        try:
            start_dt = tz.localize(datetime.strptime(info["start"], "%Y-%m-%d %H:%M"))
            cycle = timedelta(hours=info["cycle_hours"])

            if now < start_dt:
                next_spawn = start_dt
            else:
                # T√≠nh s·ªë chu k·ª≥ ƒë√£ qua k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu
                elapsed_cycles = int((now - start_dt).total_seconds() // cycle.total_seconds())
                spawn_time = start_dt + elapsed_cycles * cycle

                # N·∫øu c·∫£nh b√°o c·ªßa chu k·ª≥ hi·ªán t·∫°i ƒë√£ qua, chuy·ªÉn sang chu k·ª≥ ti·∫øp theo
                if spawn_time + timedelta(minutes=5) < now:
                    spawn_time += cycle

                next_spawn = spawn_time

            warning_time = next_spawn - timedelta(minutes=5)

            # So s√°nh trong kho·∫£ng ¬±60 gi√¢y quanh c·∫£nh b√°o
            if abs((now - warning_time).total_seconds()) <= 60:
                await channel.send(
                    f"‚ö†Ô∏è Field Boss **{boss}** s·∫Ω xu·∫•t hi·ªán l√∫c {next_spawn.strftime('%H:%M')}! Chu·∫©n b·ªã n√†o!"
                )
                print(f"‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o cho {boss} (xu·∫•t hi·ªán l√∫c {next_spawn.strftime('%H:%M')})")
                warning_sent = True
            else:
                print(f"‚è≥ {boss} - Gi·ªù spawn ti·∫øp theo: {next_spawn.strftime('%H:%M')}, c·∫£nh b√°o l√∫c: {warning_time.strftime('%H:%M')}, hi·ªán t·∫°i: {now.strftime('%H:%M:%S')}")

        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi boss {boss}: {e}")

    return warning_sent

# üü¢ Khi bot online
@bot.event
async def on_ready():
    now = datetime.now(tz)
    channel = bot.get_channel(CHANNEL_ID)
    print(f"ü§ñ Bot ƒë√£ kh·ªüi ƒë·ªông l√∫c {now.strftime('%Y-%m-%d %H:%M:%S')}")

    sent = await check_cycle_boss(boss_cycle_schedule, now, channel)

    if not sent:
        print("‚úÖ Kh√¥ng c√≥ boss n√†o c·∫ßn c·∫£nh b√°o l√∫c n√†y.")

    await bot.close()

bot.run(TOKEN)
